'''
4.문자열 슬라이싱
    - info에서 이름과 성별을 각각 변수에 저장
'''
info="한수창 - 남자"
name=info[:3]
gender=info[6:8]
print(name)
print(gender)
print()

'''
문자열 기본 포맷팅
    - 문자열 안에 '값을 삽입'하는 방법

    -포맷코드(서식 문자)
        %s 문자열(string)
        %c 문자 1개
        %d 정수형
        %f 실수형
        %% %하나 삽입
'''

print("정수 : %d" %10)

my_str="정수 : %d"%20
print(my_str)

#C언어의 printf와 유사
#차이점 : 파이썬은 '문자열'에 값을 삽입해서 새로운 문자열 생성
#문자열 뒤에 바로 %기호를 붙여서 값을 입력

print("실수 : %f"%10.3)
print("문자열 : %s" %"문자열")
#포맷코드(서식문자)의 사용은 뒤따라오는 값을
#어떤 형태로 삽입할 것인지를 결정

print("정수 : %d"%10.123)#실수 -> 정수(소수점 이하 소멸)
print("실수 : %f" %30)#정수 -> 실수 (없던 소수점 생성)
#값의 표현방법
print("문자열 : %s"%1)
print("문자열 : %s"%1.234)
#숫자 -> 문자(%s)는 가능. %s는 모두 글자취급

#포맷팅의 이유
#문자열을 생성 시 변수의 값을 편하게 다루기 위함.

year=2018
print("%d년입니다."%year)   #2018년입니다.

year+=1 
#복합대입연산자
#+=,-=,*= 등 대입연산자(=) 다른 연산기호가 합쳐진 형태 = 복합대입 연산자
#year = year+1 , year = year -1
#자기 자신의 값을 이용해서 연산 후 자신에게 대입

year -= 3
print("%d년입니다."%year)
#주의사항 : 복합 대입연산자 사용시에는 사용할 변수 미리 생성
print()

print("%d개 이상의 %s넣기"%(2,"값"))
#%뒤에 값들을 소괄호로 묶어준다. 순서대로 값이 포맷코드에 삽입
print("오늘의 강수확률 %d%%"%10)
#포매팅은 사용하면 %하나를 사용하고 싶을 때 %% 두번사용
print()

'''
포맷코드를 활용한 소수점 표현
'''
print("소수 : %f"%10.1)#기본 6자리로 삽입
print("소수 : %f"%10.1435346645546)#자동 반올림
print("소수 : %.2f"%3.141592)#반올림

'''
포맷코드를 활용한 정렬과 공백
'''

print("%5s%5s"%("파이썬","재미있다"))  #삽입 시 5칸 확보 후 값을 삽입
print("%-5s%-5s"%("파이썬","재미있다"))    #좌측정렬
print()

'''
문자열 포매팅 함수
문자열.format()
프로그래밍 언어에서 ~~~~.함수()
함수는 미리 정의된 기능

'''
my_str="제 이름은 {} 입니다.".format("홍길동")#(1)만든 문자열에 변수를 대입
print(my_str)
print("제 나이는 {}살 입니다".format(20))

#1.포맷코드 대신 {}중괄호 사용한다.
#2.하나의 문자열을 만드는 과정
#format 함수는 '문자열'로 사용할 수 있는'문자열의 함수'

print("1. 제 이름은 {}이고, {}살 입니다.".format("홍길동",20))#순서대로
print("2. 제 이름은 {1}이고, {0}살 입니다.".format("홍길동",20))
#{}안에 인덱스 사용

name = "홍길동"
age = 20
print("3. 제 이름은 {}이고, {}살 입니다.".format(name,age))
#키워드 사용

print("4. 제 이름은 {name}이고, {age}살 입니다.".format(name=name,age=age))
print("5. 제 이름은 {name}이고, {age}살 입니다.".format(name=age,age=name))

print("6. 제 {}은 {name}이고, {}살 입니다.".format("이름",20,name="홍길동"))
#키워드와 인덱스 혼용 시 키워드는 맨 뒤에 위치
#format()안의 값은 인덱스한테 우선권이 주어짐

#출력 방법 비교
print("제 이름은 "+name+"이고, ",age,"살 입니다.",sep='')
print("제 이름은 %s이고, %s살 입니다."%(name,age))    #기본 포매팅
print("제 이름은 {}이고, {}살 입니다.".format(name,age))  #포매팅 함수
print()

print("소수 : {}".format(10.123))
print("소수 : {0}".format(10.1235465789785644564864864684868)) #14자리까지만 표시
print("소수점 3자리 : {0:.3f}".format(10.154523,19.456456))
print()
#format() 함수 사용 시 중괄호{} 에 특수한 기능을 추가하는 기호 콜론(:)
#콜론 사용 시에는 인덱스 뒤에 위치 한다(인덱스 생략 가능)

#정렬
print("[{}][{}]".format("파이썬","재미있다"))
print("[{:10}][{:10}]".format("파이썬","재미있다"))    #10칸 확보, 기본 좌측정렬 <
print("[{:>10}][{:>10}]".format("파이썬","재미있다"))  #우측정렬 >
print("[{:^10}][{:^10}]".format("파이썬","재미있다"))    #가운데 정렬 ^

#정렬 후 빈 공간에 값 채우기
print("[{:ㅋ^10}][{:ㅎ^10}]".format("파이썬","재미있다"))
#1개의 문자를 채울 수 있다.

'''
기본 적용
1)print()함수의 sep=' ' end ='\n'
2){} : 인덱스가 0부터 시작(기본값)
3)<  : 생략해도 좌측정렬
4)공백 : 생략해도 빈공간이 공백으로 채워진다.

'''

'''
포매팅 나열
'''
name="한수창"
age="20"
phone="010-8383-9133"

#1
print("이름 : %s"%name)
print("나이 : %s"%age)
print("번호 : %s"%phone)

print("이름 : %s\n나이 : %s\n번호 : %s"%(name,age,phone)) #한줄
#2
print("이름 : {} \n나이 : {} \n번호 : {}".format(name,age,phone))
#3
print("이름 : "+name+"\n나이 : "+age+"\n번호 : "+phone)
'''
포매팅 연습
'''
print("{:=>20}\n{:^20}\n{:=>20}".format("","string",""))

print("이름 : %s\n나이 : %s\n번호 : %s"%(name,age,phone))
