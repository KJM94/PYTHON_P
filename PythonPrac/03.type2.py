#파이썬 자료형들 : 숫자,문자,리스트,튜플....

'''
    [3.리스트(List) 자료형]
        -데이터(값) 들의 목록
        -편리하다.

        리스트명(변수) = [요소1,요소2,요소3,....]
'''

print("="*20)
print("{:^20}".format("LIST"))
print("="*20)
print("[리스트 만들기]")

a = []#요소가 없는 빈 리스트
b = [1,2,3]#요소가 정수
c = ["A","B","C"]#요소가 문자열
d = [1,2,"A","B","C"]#혼합
e = [1,"A",[2,"B"]]#혼합 + 리스트 안에 또 다른 리스트

#d,e는 바람직한 형태X(문법적으로는 문제 없음)
#리스트를 사용 - > 관련있는 자료의 묶음
#서로 다른 자료형이 섞이면 비효율적임
print(a)
print(b)
print(c)
print(d)
print(e)

#type() : 자료의 종류를 가르쳐준다
print("변수 a의 타입 :",type(a))
print("1 의 타입 :",type(1))
print()


print("[리스트 인덱싱,슬라이싱]")

#문자열 : 하나하나 문자들이 순서대로 나열된 형태
#리스트 : 하나하나 요소들이 순서대로 저장된 형태
#순서가 있다 = 인덱싱,슬라이싱 가능

my_list = ["한수창","홍길동","임꺽정"]
#문자열 3개를 요소를 가진 리스트
print(my_list)

print("첫 번째 사람 :"+my_list[0])
#리스트의 첫번째 요소가 '문자열'이므로
#인덱싱한 값도 '문자열'

num_list = [1,2,3]
print("첫 번째 요소",num_list[0])
#요소가 '정수'이면 인덱싱 결과도 '정수'

#인덱싱 비교
#문자열 : 모든 요소가 문자이기 때문에 인덱싱하면 다 '문자'
#리스트 : 각 요소으 ㅣ형태에 따라 인덱싱 결과(자료형)이 다르다.

#이중 리스트 인덱싱(리스트 안에 리스를 요소 가진 경우)
my_list=["한수창","홍길동",["임꺽정","이몽룡"]]
print(my_list[2])#리스트
print(my_list[2][0])#my_lsit 3번째 요소 리스트에서 1번쨰 요소 인덱싱
#인덱스 범위 초과,음수 사용 개념은 동일
print(my_list[2][0][0])
print(my_list[0][1])

a = [2,"2"]
print(a[0]*2)
print(a[1]*2)

#슬라이싱도 동일
print(a[0:2])
print(a[0:1])#끝 인덱스 포함 X
#요소가 하나밖에 없어도 '슬라이싱의 결과'는 '리스트'
# >무조건 리스트

print("[리스트 연산]")
a = [1,2,3]
b = [4,5,6]
print("리스트 덧셈 :",a+b)#연결
print("리스트 곳셈 :",a*2)#반복
# --> 하나의 새로운 리스트 생성
c = a + b
print(c)
print(type(c))
print()

print("[리스트 수정하기(변경,삭제)]")
#문자열 수정 불가
a = [1,2,3,4,5,6]

a[2] = -1
print("변경 후:",a)

#연속된 볌위의 값을 수정
#a[0:2] = 0#오류!! 슬라이싱의 결과는 '리스트'
a[0:2] = [0]
print("변경 후:",a)
#0,1(첫번쨰,두번째) 요소를 [0]으로 변경

a[0:2] = [6,7,8]
print("변경 후:",a)

#인덱싱
a[0] = [1,2]#첫번째 요소에 '리스트' 대입
#리스트는 하나의 자료형(값),리스트 안에 요소가 여러개 있을뿐
print("변경 후:",a)

a[0] = []
print("변경 후:",a)#삭제가 아님,빈 리스트 대입

del(a[0])#해당 요소를 제거
print("변경 후:",a)


a[0:2] = []#슬라이싱을 하여 빈 리스트를 대입하면 제거
print("변경 후:",a)

del(a[0:1])#인덱싱과 동일하게 요소들이 제거
print("변경 후:",a)

del(a)
#print("변경 후:",a)#오류 없는 변수사용
print()

print("[리스트 관련 함수]")
#리스트.함수()
a = [1,2,3]
#append(value) : 리스트 가장 뒤에 value(요소)를 추가
a.append(4)
print("append(4)를 하고 a =",a)
#문자열은 수정이 불가능하므로 새로운 문자열을 만들어 내는 함수
#리스트 관련된 대다수 함수들은 리스트 자체를 수정

a.append([5,6])
print("append([5,6])를 하고 a =",a)
#append는 '하나'의 요소만 추가 가능
print()

#sort() : 리스트 정렬하기(숫자,알파벳 등)
a =[9,2,8,3]
print("a =",a)
a.sort()
print("a =",a)#리스트 자체가 변경
a.sort(reverse=True)#내림차순.(정렬 후 결과를 뒤집는다.)
#True = 참 / False = 거짓
print("a =",a)

#sort/sorted
#a.sort() : a자체가 정렬(a는 주체)
#sorted(a) : a를 정렬한 새로운 리스트 생성(a는 도구)
a =[3,1,2]

b = sorted(a)
print("a =",a)
print("b =",b)
print()

#reverse() : 리스트 뒤집기(정렬 X,현재 요소를 반전)
a = [9,2,8,3]
a.reverse()
print("a =",a)
print()

#index() : 리스트에서 value 찾고, 그 위치 반환
a = [1,2,3]
print("a에서 2위치 :",a.index(2))
#찾는 '값'이 없으면 오류

#insert(index,value) : 지정한 위치(index) 값(value) 삽입
a.insert(1,"뿅")
print("a =",a)
#리스트 = 요소들이 혼합 가능
#숫자들만 리스에 문자 추가가능
#append = 맨 뒤에 추가(삽입)
#insert = 지정한 위치에 추가(삽입)
print()

#remove(value) : 리스트에서 '처음' 찾은 값(value) 제거
a = [1,2,3,1]
a.remove(1)
print("a =",a)
#a.remove(5)#오류 리스트에 없는 값을 지우려하면 오류

#a[0] = []   ->첫 번째 요소를 '빈 리스트'로 변경
#del(a[0])   ->첫 번째 요소를 제거(0은 순서)
#a.remove(0) ->정수 0을 찾아서 제거(0은 값)
print()

#count(value) : 리스트에 존재하는 value 개수 반환
a = [1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1]
print("a에서 2의 개수 :",a.count(2))
print("a에서 5의 개수 :",a.count(0))#없으면 0

'''
pop(index) : 리스트에서 (index)번쨰 값을 '뽑아낸다'
    1.뽑아낸 값을 '반환'(어떤 값인지 가르쳐 준다)
        >우리가 사용할 수 있다.(변수 대입/어딘가에 사용)
    2.리스트에서 해당 요소 제거(뽑아내는 개념)
'''
a =[1,2,3,1]
print("a =",a)
print("a.pop(1) =",a.pop(1))
print("a =",a)
a_ = a.pop(1)
print("a =",a)
print(a_)
print("a.pop(1) =",a.pop())#index를 사용하지 않으면 기본 '맨 뒤'


#len() : 요소의 개수를 구하는 함수
a = [1,2,3,4]
b = "1234"
c = 1234
#c[0] = 1#오류(하나의 값,순서X)

print("len(a) =",len(a))
print("len(b) =",len(b))
#print("len(c) =",len(c))
#a = 리스트 = '어떤' 요소들 여러개 존재
#b = 문자열 = '문자' 들이 여러개 존재
#c = 정수 = 단 하나의 숫자(값)
#값이 여러개 존재하는 자료형만 사용 가능
print()

#copy() : 모든 값들을 '복제'하여 새로운 생성
a = [1,2,3,4]
b = a.copy()
c = a

a[3] = -10
c[0] = -20
#c = a를 했을 때 이미 만들어진 a리스트를 c가 같이 가르킨다

print("기존 a =",a)
print("복제 b =",b)
print("대입 c =",c)
print()

#clear() : 리스트의 모든 요소 제거
a.clear()
print("a =",a)
#리스트가 삭제되지는 않는다(요소만 제거)

#list의 요소들이 "문자열"로만 이루어진 경우
#문자열 관련 함수 중 'join()'을 이용하여 '하나의 문자열'생성
my_list=["대","한","민","국"]
my_str = "".join(my_list)

print(",".join("하하하"))
print(my_list)
print(my_str)
print()



'''
    리스트 인덱싱 연습하기
    2018년 새해가 밝았습니다. 내년은 2019년 입니다.
'''
#     0         1       2       [3][0]      [3][1]      [4]     [5][0]
a = [2018, "입니다.", "새해", [" 내년", "가 밝았습니다."], "은 ", ["년 "]]

print(a[0],a[5][0],a[2],a[3][1],a[3][0],a[0]+1,a[5][0],a[1],sep='')

'''
    리스트 활용 연습하기
      my_list를 이용하여 "안녕하세요!" 문자열을 만들고 출력하기
      join() 함수 활용

'''
my_list = [ "!", "요", "세", "요", "하", "녕", "안" ]

my_list.reverse()
my_list.remove("요")
my_str = "".join(my_list)

print(my_list)
print(my_str)


'''
    [4.튜플(Tuple)자료형]
        리스트와 비슷
            -차이점
                1.생성법
                    리스트 []
                    튜플   ()
                2.튜플은 한 번 만들면 변경불가
                    >문자열과 비슷
            -프로그램이 수행되는 동안 요소가 변경되지 않게 하고 싶다면
            리스트 대신 튜플 사용
'''
print("="*20)
print("{:^20}".format("Tuple"))
print("="*20)

print("[튜플 만들기]")
a = ()#빈 튜플(쓸모없음)
b = (1,)#요소가 1개인 경우 뒤에 콤마
c = (1,2,3,"A","B","C")
d = 1,2,3 #()생략해도 튜플
#a,b,c = 1,2,3 이 코드는 변수에 순서대로 대입
e = (1,"A",(2,"B"))

print(a)
print(b)
print(c)
print(d)
print("d의 type : ",type(d))
print(e)
print()
print("[튜플 = 상수(변하지 않는값]")
a = 1,2,3,4
print(a[0])#인덱싱 가능
print(a[0:2])#슬라이싱 가능(슬라이싱의 결과는 '튜플')

#a[0] = -1#오류! 튜플의 요소는 변경 불가
#del(a[0])#오류! 삭제 X
del(a)

#리스트.함수 보다 튜플.함수가 훨씬 적다

#덧셈 곱셈 연산 가능
a = 1,2,3,4
b = 5,6,7,8
c = a+b

print(c)
print(c*2)


































