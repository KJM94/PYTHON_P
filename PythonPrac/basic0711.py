'''
문자형
    "abc"
    '123'
        - 따옴표로 둘러쌓이면 문자열


문자열을 만드는 4가지 방법
    1.큰 따옴표1개
    2.작은 따옴표 1개
    3.큰 따옴표 3개
    4.작은 따옴표 3개

    이스케이프 문자
        -'문자열 안에서' 특수한 기능을 가지는 문자
        -역슬래쉬(\)로 시작한다.

        \n : 개행(줄바꿈) new line
        \t : tab 키를 누른만큼 들여쓰기
            (공백보다 많이 띄어진다)
        \\ : \하나 사용
        \" : "하나 사용
        \' : '하나 사용
'''

print('1.happy day')

print("2.happy day")

print("""3.happy day""")

print('''4.happy day''')
#위의 방법 모두 동일한 문자열

#각 방법들의 사용용도
#"파이썬 재밌다"
print('김철수 :"파이썬 재밌다"')
print("김철수 :'파이썬 재밌다'")
#여러 줄의 문자열 다루기 - 3개짜리 사용
print("""안녕하세요
파이썬입니다""")

hello='''안녕하세요
파이썬입니다'''

print(hello)

#이스케이프문자 삽입
print("김철수 : \"파이썬 재미있다\"")
print("안녕\t하세요\n 파이썬입니다.")

#문자열과 주석의 관계
#문자열과 주석
import sys

my_string='''안녕'''#변수에 대입된 문자열
'''안녕2'''#주석같은 존재(문자열)

print("안녕 count=",sys.getrefcount('''안녕'''))
print("안녕2 count=",sys.getrefcount('''안녕2'''))
#안녕2는 사용 x
#파이썬이 주석(문자열)을 읽긴 하지만 영향이 없다.
'''
문자열 연산하기
    1. +:연결
    2. *:반복
'''
#문자열 연산하기
#+
print("안녕"+"하세요")
str1="안녕"
str2="하세요"
print(str1+str2)


#*
print("안녕"*3)

str3="곱셈"*5     #연산 결과를 만든 후 변수에 대입
    
print(str3)

'''
문자열 인덱싱
    -인덱싱(indexing) : index 색인,무언가를 가리킨다.
    -문자열에서 특정 글자를 뽑아내어 사용하는 것
        >특정 글자를 찾을 때,'순서'를 사용 ->인덱스
    순서는 0부터 시작
        >>인덱스라는 표현이 들어가면 무조건 0부터 시작
        >>컴퓨터는 숫자를 0부터 센다.
            >음수는 뒤에서부터 센다.
    "ABCDE"

'''

#서두르지도 말고, 쉬지도 말고 - 괴테
my_str = "without haste, but without rest." #32글자

print(my_str)
#문자열에서 특정 순서의 글자를 뽑을 때 []사용

print(my_str[0],my_str[1],my_str[10])
print(my_str[-1],my_str[5],my_str[31],my_str[30])   #다른 언어에서는 인덱스에 음수 x

#범위를 초과하지 않도록 주의

print(my_str[-32])  #음수는 -1부터

#1.문자열 출력
print('''철수 "안녕? 파이썬 재밌지?"
영희 "응, 너무 재밌어!"''')

print("철수 \"안녕? 파이썬 재밌지?\"\n영희 \"응, 너무 재밌어!\"")

#2.문자열 연산 연습
print("*"*20,end='')
print("\n     파이썬최고"*3)
print("*"*20)

print(("*"*20)+("\n     파이썬최고"*3)+("\n")+("*"*20))


'''
    문자열 슬라이싱
        -슬라이싱(slicing) : 조각낸다
            >인덱스로 특정 범위의 문자를 조각내서 사용
            a[0:3] -->콜론(:)으로 범위 지정

            a[시작인덱스:끝인덱스] -> 끝인덱스는 포함 x
                >시작인덱스<= a < 끝인덱스

            a[시작인덱스 : ] --> 시작인덱스 부터 끝 까지
            a[:끝인덱스] --> '처음'부터 '끝인덱스'까지(끝은 포함되지 않는다.)
            a[:] --> 시작부터 끝->전체 = a와 같다.
        
'''

my_str = "without haste, but without rest." #32글자
print(my_str[0:4])#연속되는 문자는 슬라이싱을 사용하면 편함

print(my_str[8:13])#시작 인덱스가 0일 필요는 없다.

print(my_str[0:100])#슬라이싱은 인덱스 범위를 초과해도 오류가 없다.
print(my_str[0:-7])#처음부터 '뒤에서 7번째'까지
#마찬가지로 끝 인덱스인 -7번째는 포함하지 않는다.
print(my_str[:-200])#처음부터 '뒤에서 200번째'까지

print(my_str[:13])
print(my_str[5:10])

#my_str의 문자 중, 첫 글자만 소문자로 바꾸고 싶다면,
#my_str[0]= 'w'   이미 만들어진 문자열은 수정불가
#슬라이싱을 이용해서 '새로운 문자열' 만들어야 한다.

new_str='W'+my_str[1:]
print(new_str)

#중요 -->문자열은 변경 불가능 --> 새로 만들어야 한다.
#인덱싱과 슬라이싱은 '문자열'뿐 아니라
#하나의 자료가 여러 개의 값으로 이루어진 경우 사용 가능
#문자열=문자 하나하나가 나열된 자료

phone_number="010-8383-9133"
only_number=phone_number[:3]+phone_number[4:8]+phone_number[9:]
print(only_number)  #01083839133

