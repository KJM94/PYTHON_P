# 02_type1.py

# data type : 자료형
# 어떠한 값(자료)의 형태

'''
    [1. 숫자형(Number)]
        정수          : -1234, 0, 1234
        실수(소수)     : 1.1, -123.331
        2진수(binary) : 0b10, 0B10 
        8진수(octal)  : 0o10, 0O10
        16진수(hexdecimal) : 0x10, 0X10

        * 진법 계산 ...
          10진수를 다른 2진수나 16진수로
          자유자재로 변경할 필요는 없다.
          그렇지만 2진수나 16진수를 10진수로 변경하는건
          익숙해질 필요가 있다. (우리에겐 10진수가 자연스럽기때문)

    사칙연산   : +  -  *  /
    제곱연산   : **
    나머지연산 : %
    몫 연산    : //
'''
# 괄호나 따옴표 등은 '짝'이 있다.
# 나중되면 짝이 안 맞아서 코드 오류남.. (99%)
# 꼭~~~ 기호를 열면 닫아놓고 다시 돌아와서 작성한다.

print("===================")
print("1. 숫자형")
print("===================")


print("[기본 숫자형]")
print("정수 :", -1, 0, 10)
print("실수 :", -1.11, 10.12)
# print() 함수는 숫자를 10진수로 출력해준다.
print("2진수 :", 0b100, 0B100)
print("8진수 :", 0o100, 0O100)
print("16진수 :", 0x10, 0X10)
print()

print("[숫자 연산하기]")
# 연산자   : 연산(계산)을 수행하는 '기호'
# 피연산자 : 연산자의 작업 대상
#  연산을 수행한다 ==> 피연산자를 이용하여 '하나의 값'을 만듦
num1 = 10
num2 = 3
print("[num1 = ", num1, ", num2 = ", num2, "]", sep="")
print("num1 + num2 =", (num1+num2))
# 연산을 수행할 때, 만들어질 하나의 값은 () 소괄호로 묶는다.
#   >> 필수는 아님. 좋은 습관
print("num1 - num2 =", (num1-num2))
print("num1 * num2 =", (num1*num2))
print("num1 / num2 =", (num1/num2))
print("num1 ** num2 =", (num1**num2))
print("num1 % num2 =", (num1%num2))
print("num1 // num2 =", (num1//num2))

# 나머지 연산 %
#   - 두 수를 나누고, 나머지 값만 사용
#   - 12를 3으로 나눈 나머지가 0이면 12는 3의 배수이다.
#   - 어떤 수를 2로 나눈 나머지가 0이면 짝수, 1이면 홀수

print()

'''
    [2. 문자형(String)]
        "abc"
        '123'
            --> 따옴표로 둘러싸이면 문자열이다!

        문자열을 만드는 방법
          1. 큰 따옴표 1개
          2. 작은 따옴표 1개
          3. 큰 따옴표 3개
          4. 작은 따옴표 3개

        이스케이프 문자
          - '문자열 안에서' 특수한 기능을 가지는 문자
          - 역슬래시(\)로 시작한다.
          
            \n  : 개행(줄바꿈) new line
            \t  : tab 키를 누른 만큼 들여쓰기
                  (공백보다 많이 띄어진다)
            \\  : \ 하나 사용
            \"  : " 하나 사용
            \'  : ' 하나 사용
'''
print("===================")
print("2. 문자형")
print("===================")

print("[문자열 만드는 4가지 방법]")
# C언어, JAVA 등에서는 작은따옴표는 1개 문자만을 표현
# 큰따옴표만 문자열로 인정
print('1. happy day')
print("2. happy day")
print('''3. happy day''')
print("""4. happy day""")
print() # 위 방법 모두 동일한 문자열이다.

print("[각 방법들의 사용 용도]")
# 김철수 : "파이썬 재밌다!"
#print("김철수 : "파이썬 재밌다!"") #문자열에 큰따옴표 포함
print('김철수 : "파이썬 재밌다!"') 
# 반대의 경우도 동일!

# 이스케이프 문자 삽입
print("김철수 : \"파이썬 재밌다!\"")
# 마찬가지로 \' 도 동일
print()

# 여러 줄의 문자열 다루기 -> 3개짜리 사용
print("""안녕하세요
파이썬입니다.""")

hello = '''안녕하세요
파이썬입니다.'''

print(hello)
print()

# 문자열과 주석의 관계...
print("[문자열과 주석]")
import sys

my_string = '''안녕1''' # 변수에 대입된 문자열

'''안녕2'''  # 마치 주석같은 존재 (문자열)

print("안녕1 count =", sys.getrefcount('''안녕1'''))
print("안녕2 count =", sys.getrefcount('''안녕2'''))
# 안녕2의 카운트가 2가 나온것은 기본값이라고 생각!
#   > getrefcount를 했을때 무조건 추가되는 값
# 안녕2는 사용되지 않았다.
# 파이썬이 주석(문자열)을 읽긴 하지만 영향이 없다.
print()

'''
    문자열 연산하기
        1. + : 연결
        2. * : 반복
'''
print("[문자열 연산하기]")
# +
print("안녕" + "하세요")
str1 = "안녕"
str2 = "하세요"
print(str1+str2)

# *
print("안녕"*3)
# 곱셈도 연산 -> 하나의 값을 만듦
# 문자열 곱셈 연산의 결과가 "안녕안녕안녕" 이고, 이걸 출력

str3 = "곱셈"*5 # 연산 결과를 만든 후 변수에 대입
print(str3)
print()

# 문자열 곱셈 응용
print("="*10)
print("깔끔")
print("="*10)
print()

'''
    문자열 인덱싱
        - 인덱싱(indexing) : index 색인. 무언가를 가리킨다.
        - 문자열에서 특정 글자를 뽑아내어 사용하는 것
          > 특정 글자를 찾을 때, '순서'를 사용 -> 인덱스
"별표"*100 > 순서는 0부터 시작.
            >> 인덱스라는 표현(용어)이 들어가면 무조건 0부터
            >> 컴퓨터는 숫자를 0부터 센다.
          > 음수는 뒤에서부터 순서를 센다.
'''
print("[문자열 인덱싱]")
# 서두르지도 말고, 쉬지도 말고 - 괴테
my_str = "Without haste, but without rest." # 32글자
print(my_str)
# 문자열에서 특정 순서의 글자를 뽑을 때 [] 사용
print(my_str[0], my_str[1], my_str[10])
print(my_str[-1]) # 다른 언어에서는 인덱스에 음수는 없다!!

# print(my_str[32]) # 오류! 33번째 글자를 의미. (없다)
# print(my_str[-33]) # 오류! 음수도 마찬가지로 범위 초과 오류
print()

'''
    문자열 슬라이싱
        - 슬라이싱(slicing) : 조각낸다
          > 인덱스로 특정 범위의 문자를 조각내서 사용

        a[0:3]   --> 콜론(:)으로 범위 지정

        a[시작인덱스:끝인덱스]  -> 끝인덱스는 포함 안 된다.
            시작인덱스 <= a < 끝인덱스

        a[시작인덱스:]  --> '시작인덱스' 부터 '끝'까지
        a[:끝인덱스]    --> '처음'부터 '끝인덱스'까지
                            (끝은 포함되지 않는다.)
        a[:]  --> 시작부터 끝 -> 전체 = a 와 같다.
'''
print("[문자열 슬라이싱]")

# 서두르지도 말고, 쉬지도 말고 - 괴테
my_str = "Without haste, but without rest." # 32글자

print(my_str[0] + my_str[1] + my_str[2] + my_str[3]) #불편
print(my_str[0:4]) # 연속되는 문자는 슬라이싱을 사용하면 편함
# 끝인덱스는 포함되지 않는다! (주의사항)
print(my_str[8:13]) # 시작인덱스가 0일 필요는 없다.

print(my_str[0:100]) # 슬라이싱은 인덱스 범위를 초과해도 오류 X
print(my_str[8:]) # 8부터 끝
print(my_str[:-7]) # 처음부터 '뒤에서 7번째'까지
# 마찬가지로 끝 인덱스인 -7번째는 포함되지 않음

print(my_str[:-200]) # 처음부터 '뒤에서 200번째'까지
# 뒤에서 200번째는 없다! (출력 내용 없음)

# my_str의 문자 중, 첫 글자를 소문자 w로 바꾸고 싶다면,
#my_str[0] = 'w' # 오류! --> 이미 만들어진 문자열은 수정 불가!
# 슬라이싱을 이용해서 '새로운 문자열' 만들어야한다.
new_str = 'w' + my_str[1:]
print(new_str)

# 중요! --> 문자열은 변경 불가능 --> 새로 만들어야한다.

# 인덱싱과 슬라이싱은 '문자열'뿐만 아니라,
# 하나의 자료(ex:문자열)가 여러 개의 값으로 이루어진 경우 사용 가능
#     문자열 = 문자 하나 하나가 나열된 자료
print()

'''
    문자열 기본 포매팅
        - 문자열 안에 '값'을 '삽입'하는 방법

        - 포맷 코드 (서식 문자)
            %s  문자열 (string)
            %c  문자 1개
            %d  정수
            %f  실수
            %%  % 하나 삽입
'''
print("[문자열 기본 포매팅]")
print( "정수 : %d" % 10 )
my_str = "정수 : %d" % 20
print( my_str )
# C언어의 printf와 비슷
# 차이점 : 파이썬은 '문자열'에 값을 삽입해서 새로운 문자열을 만듦
# 문자열 뒤에 바로 % 기호를 붙여서 값을 입력

print( "실수 : %f" % 10.1 )
print( "문자열 : %s" % "나는 문자열" )
# 포맷코드(서식문자)의 사용은 뒤따라오는 값을
# 어떤 형태로 삽입할지 결정

print( "정수 : %d" % 10.12345 ) # 실수 값을 정수로 삽입 (소수점 이하 소멸)
print( "실수 : %f" % 30 ) # 정수 값을 실수로 삽입 (없던 소수점 생김)
# 값의 표현 방법

#print( "정수 : %d" % "1" ) # 오류!  문자열을 숫자형태(%d,%f)로 삽입 오류!
print( "문자열 : %s" % 10 )
print( "문자열 : %s" % 10.123 )
# 숫자를 문자형태(%s)로 삽입은 된다. %s는 다 글자취급을 함 --> 만능표현법
print()

# 포매팅은 왜 합니까?   문자열을 만들 때, 변수의 값을 편하게 다루기 위함
year = 2018
print( "변수 사용 : %d" % year )
print( "변수 사용 : %s" % year )

# 하나의 문자열을 만들 때, 값이 들어갈 위치를 미리 지정해놓고 포맷코드를 사용
print( "%d년 입니다." % year ) # year 변수를 함께 사용하려면.. 포매팅 없이는 불편

year += 1 # year = year + 1 과 같은 코드
print( "%d년 입니다." % year )
year += 1
print( "%d년 입니다." % year )

print( "올해는", year, "년 입니다." )
# +=, -=, *= 등등 대입연산자(=)와 다른 연산기호가 합쳐진 형태 = 복합 대입 연산자
# year -= 3     --> year = year - 3
# 다 동일한 형태.  나 자기 자신의 값을 이용해서 연산 후, 나한테 다시 대입

# 주의사항 : 복합대입연산자를 사용할 변수는 꼭~~ 이미 만들어져 있어야 한다.
# next_year += 1 #오류! next_year+1 을 해야하는데... next_year 변수는 없다!

print()

print( "%d개 이상의 %s 넣기" % (2, "값") )
# % 뒤의 값들을 소괄호로 묶어준다. 순서대로 값이 포맷코드에 삽입
print( "오늘의 행복지수 100%" )
print( "오늘의 행복지수 %d%%" % 100 )
# 문자열 포매팅을 사용하지 않으면, (뒤에 %를 붙이지 않으면)
# % 기호는 일반 문자처럼 사용되지만...
# 포매팅을 사용하면, % 하나를 사용하고 싶을 때, %% 두번 써야 한다.
print()

print("[포맷코드를 활용한 소수점 표현]")
print("소수 : %f" % 10.1) # 기본 6자리로 삽입
print("소수 : %f" % 10.666666666) # 자동 반올림
print("소수점 지정(3) : %.3f" % 10.66666666) # 마찬가지로 반올림
# 뒤에 숫자만 바꾸면 소수점 지정 가능!
print()

print("[포맷코드를 활용한 정렬과 공백]")
print( "[%s] [%s]" % ("파이썬", "재밌다") )
print( "[%20s] [%20s]" % ("파이썬", "재밌다") ) # 삽입 시 20칸 확보 후 값을 넣겠다!
print( "[%-20s] [%-20s]" % ("파이썬", "재밌다") ) # 좌측정렬 (음수니까 왼쪽 느낌..)
print()

# 우리는 앞으로 문자열을 다룰 때, 값을 삽입할 일이 있으면 지금 배운 기본포매팅을
# 사용하지 않을 것... ???? 배운 이유 : 포맷코드 (%d, %f 이런 코드의 사용법)

# 이어서 배울 '포매팅 함수'를 사용할 것임

print("[문자열 포매팅 함수]")
#   문자열.format()
my_str = "제 이름은 {} 입니다.".format("한수창")  # (1) 만든 문자열을 변수에 대입
print(my_str)
print( "제 나이는 {}살 입니다.".format(20) )      # (2) 만든 문자열을 바로 출력
# 1. 포맷코드 대신 {} 중괄호를 사용한다. 마치 %s와 같다.
# 2. 하나의 문자열을 만드는 과정
#   프로그래밍 언어에서..   ~~~~.함수() 형태가 많다. 이 형태에 익숙해져야함!
#   format() 함수는 '문자열'로 사용할 수 있는 '문자열의 함수'

# 이 아래부터 문자열.format() 을 사용할건데..!
# "".format() 형태를 완성시킨 후 값을 채움
print( "1 제 이름은 {}이고, {}살 입니다.".format("한수창", 20) ) # 기본은 순서대로
print( "2 제 이름은 {1}이고, {0}살 입니다.".format("한수창", 20) ) # {}안에 인덱스 사용

name = "한수창"
age = 20
# 변수도 동일하게 사용
print( "3 제 이름은 {}이고, {}살 입니다.".format(name, age) )

# '키워드' 사용   (마치 키워드가 변수처럼 됨.. 변수에 값을 대입하듯이 사용)
print( "4 제 이름은 {name}이고, {age}살 입니다.".format(name="한수창", age=20) )
# 순서 상관 없음
print( "5 제 이름은 {name}이고, {age}살 입니다.".format(age=20, name="한수창") )

print( "6 제 이름은 {name}이고, {age}살 입니다.".format(name=name, age=age) )
# 이때, name=name에서 앞의 name은 format()함수의 키워드, 뒤의 name은 변수
# name변수의 "한수창" 문자열을 name 키워드 위치에 삽입하겠다.

# 키워드와 인덱스 혼용 시 키워드는 맨 뒤에 위치해야한다.
print( "7 제 {}은 {name}이고, {}살 입니다.".format("이름", 20, name=name) )
# format() 안의 값은 인덱스한테 먼저 우선권이 주어짐.

#print( "7 제 {}은 {name}이고, {}살 입니다.".format("이름", name=name, 20) ) #오류
print()

# 출력 방법 비교
print( "제 이름은 " + "한수창" + "이고, " + "20" + "살 입니다." ) # (1) 포매팅 X
print( "제 이름은 %s이고, %s살 입니다." % ("한수창", 20) ) # (2) 기본 포매팅
print( "제 이름은 {}이고, {}살 입니다.".format("한수창", 20) ) # (3) 포매팅 함수

print()
# 소수점 표현
print( "소수 : {}".format(10.123) )
# % 이용할땐 (%f) 소수점 6자리였는데...
# 이건 마치 %s와 같다. (문자 취급)
print( "소수 : {0}".format(10.12893128905128905123123) ) # 14자리까지
# 0은 그냥 인덱스

print( "소수점 3자리 : {:.3f}".format(10.77777) )
print( "소수점 3자리 : {0:.3f}".format(10.77777) )

# format() 함수 사용 시 중괄호{} 에 특수한 기능을 추가하는 기호 --> 콜론(:)
# 콜론을 사용할 때는 인덱스 뒤에 위치한다. (인덱스는 생략해도 됨)

print()

# 정렬
print( "[{}] [{}]".format( "파이썬", "재밌다" ) )
print( "[{:10}] [{:10}]".format( "파이썬", "재밌다" ) ) # 10칸 확보, 기본 좌측정렬
print( "[{:>10}] [{:>10}]".format( "파이썬", "재밌다" ) ) # 우측정렬 >
print( "[{:<10}] [{:<10}]".format( "파이썬", "재밌다" ) ) # 좌측정렬 < (기본값)
print( "[{:^10}] [{:^10}]".format( "파이썬", "재밌다" ) ) # 가운데정렬 ^

# 정렬 후 빈 공간에 값 채우기
print( "[{:하^10}] [{:호^10}]".format( "파이썬", "재밌다" ) )
# 1개의 문자를 채울 수 있다.
print( "[{: ^10}] [{: ^10}]".format( "파이썬", "재밌다" ) ) # 원래 공백이 기본

# 이처럼 기본으로 적용되는 값들이 많이 있다.
#   1) print() 함수의 sep=' ' , end='\n'
#   2) {}  : 인덱스가 0부터 시작 (기본 값)
#   3) <   : 생략해도 기본이 좌측정렬
#   4) 공백 : 생략해도 빈 공간이 공백으로 채워진다.

print()
print("[문자열 관련 함수]")
#"".format()처럼 문자열을 이용해서 사욜할 수 있는 유용한 함수들
# > xx관련 함수 : xx.함수() 규칙

#upper() : 문자열의 영문을 모두 대문자로 변경(새로운 문자열 생성)
#lower() : 소문자로

str1 = "I'm a Boy"
print(str1)

str = str1.upper()
print(str1.upper())
print(str1)

#xx 관련 함수를 사용했을 때
# 1)기존 값을 이용하여 새로운 결과 생성
# 2)기존 값 자체가 변경
new_str =str1.lower()
print(new_str)

print("abcdefg".upper())

#title() : 문자열에 존재하는 '영단어' 첫글자를 대문자로(제목처럼)

str2 = "python python"
print(str2.title())#단어기준으로 대문자화(단어의 기준은 공백)
print(str2)#원본 변화 없음
print()

#strip() : 문자열 좌우측 존재하는 '공백' 제거
str3 = "    공 백 제 거         "
print("strip 사용 ->"+str3.strip())
#중간에 공백은 제거 X =>공백이 아닌 문자를 만날때까지만 공백 제거
print("       공백제거 합시다.      ".strip())
print("lsrtip 사용 ->"+str3.lstrip())#left : 좌측 공백만 제거
print("rstrip 사용 ->"+str3.rstrip())#right : 우측 공백만 제거
print()

#join() : 특정 문자열에 대상 문자열 삽입
print("".join("BBB"))

a = "/"
print(a.join("문자열 삽입 join()"))
print(",".join("join"))#콤마(,)fmf "join"에 삽입
#join은 새로운 문자열 생성
print()

#count("A") : 문자열에서 "A" 의 개수를 반환(함수의 결과 값이 A의 갯수)
str3 ="python python python"
print("str3 p의 갯수는 :",str3.count("p"))
#print("str3 p의 갯수는 :"+str3.count("p"))#오류! 숫자+문자
#결과 값이 '갯수' 이기 때문에 숫자(정수)

print("str3에서 x의 개수 :",str3.count("x"))#없으면 0
print()

#replace("A","B") : 문자열에서 모든 "A"를 찾아서 "B"로 변경
str3 = "replace : python python python"
print(str3.replace("p","P"))
print(str3.replace("py","Py"))
#변경하고 싶은 문자만 변경 될 수 있도록 범위 고려
#새로운 문자열 생성
str4 = str3.replace("py","Py")
print(str4)
print()

#split("A") : 문자열을 기준문자("A") 로 나눈다.
str5 = "문자열 나누기(split)"
print(str5)
print(str5.split())#split() 안에 아무것도 안 넣으면
                   #기본이 공백,개행 등 여백으로 나눔
print(str5.split("("))#나오는 결과는 리스트(list) 자료형이다

#index("A") : 문자열에서 "A"를 찾아서 그 위치(index) 반환(찾지 못하면 오류)
str6 = "문자열에서 위치 찾기(index)"
print("str6에서 '열'의 위치 :",str6.index("열"))#count처럼 정수반환
print("str6에서 'index'의 위치 :",str6.index('index'))#단어 검색 시에는 첫 인덱스
#print("str6에서 'ㅋ'의 위치 :",str6.index('ㅋ'))#오류!

#find("A") : index와 동일한 기능 (찾지 못하면 -1를 반환)
print("abcdefg".find('a'))
print("abcdefg".find('z'))#없어도 오류 발생 X

print("문자열 문자열".index("문"))#처음 찾은 문자열
print("문자열 문자열".rindex("문"))#reverse : 뒤집다 -->뒤에서부터

#find도 rfind 있음

print("문자열 문자열".index("문",2))#2번 인덱스부터 찾을께요
#2라는 값을 넣지 않으면 기본이 처음부터 ("문",0)
#find

#index,find : 없을때 오류가 나고 안나고



















































